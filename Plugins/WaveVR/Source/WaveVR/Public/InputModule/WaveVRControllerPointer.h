// "WaveVR SDK
// © 2019 HTC Corporation. All Rights Reserved.
//
// Unless otherwise required by copyright law and practice,
// upon the execution of HTC SDK license agreement,
// HTC grants you access to and use of the WaveVR SDK(s).
// You shall fully comply with all of HTC’s SDK license agreement terms and
// conditions signed by you and all SDK and API requirements,
// specifications, and documentation provided by HTC to You."

#pragma once

#include "CoreMinimal.h"
#include "Components/SceneComponent.h"
#include "Particles/ParticleSystemComponent.h"
#include "Particles/ParticleSystem.h"
#include "Math/Color.h"
#include "Engine/StaticMesh.h"
#include "Components/WidgetInteractionComponent.h"

#include "WaveVRBlueprintFunctionLibrary.h"
#include "WaveVRControllerPointer.generated.h"

UCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )
class WAVEVR_API UWaveVRControllerPointer : public USceneComponent
{
	GENERATED_BODY()

public:	
	UWaveVRControllerPointer();

protected:
	virtual void BeginPlay() override;

public:	
	virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;

private:
	uint32_t logFrame = 0;
	const uint32_t klogFrameCount = 300;
	bool printIntervalLog = false;
	void CheckLogInterval();

#pragma region
protected:
	/** Always enable the Controller Input no matter what the interaction  mode is. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	bool AlwaysEnable = false;

	EWVR_DeviceType m_DeviceType = EWVR_DeviceType::DeviceType_Controller_Right;
	/** Select the device type. Note: only controller right & left take effects. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	EWVR_DeviceType DeviceType = EWVR_DeviceType::DeviceType_Controller_Right;

	/** Hide the ray when the controller is idle. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	bool HideWhenIdle = true;

	/** Specify the player index of your pawn. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	int32 PlayerIndex = 0;

	/** Set up the available distance of controller LineTrace. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	float TraceDistance = 10000.f;

	const TArray<EWVR_InputId> kClickButtons = { EWVR_InputId::Touchpad, EWVR_InputId::Trigger, EWVR_InputId::Thumbstick };
	TArray<EWVR_InputId> m_RightClickButtons = kClickButtons;
	/** Set up the right controller buttons for click. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	TArray<EWVR_InputId> RightClickButtons = kClickButtons;

	TArray<EWVR_InputId> m_LeftClickButtons = kClickButtons;
	/** Set up the left controller buttons for click. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	TArray<EWVR_InputId> LeftClickButtons = kClickButtons;

	/** Set up the color of beam generated by Particle. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	FLinearColor FadingParticleColor = FLinearColor::Green;
	/** Set up the EmitterIndex of beam generated by Particle. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	int BeamEmitterIndex = 0;
	/** Set up the SourceIndex of beam generated by Particle. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	int BeamSourceIndex = 0;
	/** Set up the TargetIndex of beam generated by Particle. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	int BeamTargetIndex = 0;
	/** Set up the vector parameter of the Particle's size. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	FVector FadingParticleSize = FVector(0.5f, 0.5f, 0.5f);

	/** Set up the scale of the controller spot. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	FVector SpotScale = FVector(0.015f, 0.015f, 0.015f);
	/** Set up the rotation offset of the controller spot. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	FRotator SpotRotationOffset = FRotator(0, 0, 0);

	/** Set up the VirtualUserIndex of the controller widget. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	int32 WidgetVirtualUserIndex = 0;
	/** Set up the PointerIndex of the controller widget. Note: the Widget Pointer Index should be different in both hand. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "WaveVR|InputModule")
	int32 WidgetPointerIndex = 1;
#pragma endregion Customized Variables

public:
	void SetDeviceType(EWVR_DeviceType deviceType);
	void SetWidgetPointerIndex(int32 pointerIndex);
	void SetupControllerButton(const TArray<EWVR_InputId> leftButtons, const TArray<EWVR_InputId> rightButtons);
	void SetUseInputManager(bool use);

private:
	void UpdateCustomizedVariables();
	bool UseInputManager = false;

private:
	EWVR_DeviceType m_FocusType = EWVR_DeviceType::DeviceType_Controller_Right;	// Current focused controller.

// Resources
protected:
	UParticleSystemComponent* FadingParticle;
	UStaticMeshComponent* SpotPointer;
	UWidgetInteractionComponent* WidgetInteraction;

private:
	void ConfigureResources();
	bool IsControllerInteractable();

private:
	UParticleSystem* fadingParticleSystemTemplate;
	const int fadingParticleMaterialIndex = 0;
	UMaterialInterface* fadingParticleMaterial;
	const FName k_InitialColor = FName(TEXT("ParticleInitialColor"));
	const FName k_InitialSize = FName(TEXT("ParticleInitialSize"));

	UStaticMesh* spotPointerMesh;
	UMaterialInterface* spotPointerMaterial;

// Trace
private:
	FVector worldLocation = FVector::ZeroVector;
	FRotator worldRotation = FRotator::ZeroRotator;

	void SetIgnoreActors(FCollisionQueryParams& collisionParams);

	FVector targetPoint = FVector::ZeroVector;

	bool tracedPhysics = false;
	//FHitResult hit;
	TArray<FHitResult> outHits;
	AActor* focusActor;
	const float k_DefaultPointerDistance = 100;
	float targetDistance;

	FVector tracedWidgetPosition;

	FVector devicePosition = FVector::ZeroVector;
	FRotator deviceRotation = FRotator::ZeroRotator;

// Button
private:
	bool IsClicked();
	bool pressState;
};
